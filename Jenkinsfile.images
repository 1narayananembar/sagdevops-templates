#!/usr/bin/env groovy
// curl -X POST -F "jenkinsfile=<Jenkinsfile.images" http://ccbvtauto.eur.ad.sag:8080/pipeline-model-converter/validate

// def buildImages(templates) {
//     for (t in templates) {
//         dir("templates/$t") {
//             docker.withRegistry("${env.DOCKER_REGISTRY_URL}", "${env.DOCKER_REGISTRY_CREDS}") {
//                 def customImage = docker.build("${env.ORG}/${t}:${env.VERSION}.${env.BUILD_NUMBER}", 
//                     "--pull \
//                     --build-arg ORG=${env.ORG} \
//                     --build-arg RELEASE=${env.RELEASE} \
//                     . ")
//                 customImage.push()
//             }
//         }
//     }   
// }

def buildAndTestImages(templates) {
    for (t in templates) {
        dir ("templates/$t") {
            sh "docker-compose build"
            sh "docker-compose images"
            try {
                sh "docker-compose run --name $t --rm test"
                sh "docker-compose ps"
                sh "docker-compose push"
            } finally {
                sh "docker-compose logs"
                sh "docker-compose down"
            }
        }
    }   
}

pipeline {
    agent {
        label 'docker'
    }
    stages {
        stage('Build Builder') {
            steps {
                sh 'docker-compose up -d --build builder' // build and start the builder
            }
        }
        stage("Build Images") {
            parallel {
                // stage('Ninja') {
                //     steps {
                //         buildAndTestImages(['sag-ninja-server'])
                //     }
                // }
                stage('Universal Messaging') {
                    steps {
                        buildAndTestImages(['sag-um-server'])
                    }
                }
                stage('Intgration Server') {
                    steps {
                        buildAndTestImages(['sag-msc-server'])
                    }
                }
            }
        }
    }
    post {
        // failure {
        //     sh 'docker-compose logs'
        // }
        always {
            sh 'docker-compose logs'
            sh 'docker-compose down'
        }
    }    
}
