// curl -X POST -F "jenkinsfile=<Jenkinsfile" http://ccbvtauto.eur.ad.sag:8080/pipeline-model-converter/validate

pipeline {
    agent none
    parameters {
        choice(choices: '10.3\n10.2\n10.1', description: 'Test templates for this release', name: 'release')
        choice(choices: '[]\nALL', description: 'Fixes to install', name: 'fixes')
    }
    stages {
        stage("Test") {
            environment {
                TAG = "${params.release}"
            }
            parallel {
                stage('Runtimes') {
                    agent { label 'docker' }
                    environment {
                        COMPOSE_PROJECT_NAME = 'sagdevops-templates'
                        CC_ENV = 'dev'
                    }
                    steps {
                        sh 'docker-compose pull cc'
                        sh 'docker-compose up -d cc'

                        sh "./provisionw sag-apama-correlator"
                        // sh "./provisionw sag-msc-server is.fixes=${params.fixes}"
                        // sh "./provisionw sag-cloudstreams cst.fixes=${params.fixes}"
                        // sh "./provisionw sag-exx-broker exx.broker.fixes=${params.fixes}"
                        // sh "./provisionw sag-exx-c-rpc-server exx.server.fixes=${params.fixes}"
                    }
                    post {
                        always {
                            sh 'docker-compose down'
                        }
                    }    
                }
                stage('Designer and Tools') {
                    agent { label 'docker' }
                    environment {
                        COMPOSE_PROJECT_NAME = 'sagdevops-templates'
                        CC_ENV = 'dev'
                    }
                    steps {
                        sh 'docker-compose pull cc'
                        sh 'docker-compose up -d cc'

                        sh "./provisionw sag-designer-cloudstreams designer.fixes=${params.fixes}"

                    }
                    post {
                        always {
                            sh 'docker-compose down'
                        }
                    }    
                }
            }
        }
    }
}
