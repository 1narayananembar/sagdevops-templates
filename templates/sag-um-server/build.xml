<?xml version="1.0"?>
<project name="main" xmlns="antlib:org.apache.tools.ant" basedir="." default="builderBuild" >
	
	<!-- standard header start -->

	<property environment="env" />
	<condition property="antcc.home" value="${env.ANTCC_HOME}" else="antcc">
		<isset property="env.ANTCC_HOME"/>
	</condition>
	<import file="${antcc.home}/build.xml" />

	<!-- standard header end -->

	<!-- fix me -->
	<property name="env.CC_HOME" value="${env.SAG_HOME}" />

	<target name="builderStart" description="">
		<antcall target="startcc">
			<param name="install.dir" value="${env.CC_HOME}"/>
		</antcall>
		<antcall target="waitcc" />
	</target>

	<target name="builderStop" description="">
		<antcall target="stopcc">
			<param name="install.dir" value="${env.CC_HOME}"/>
		</antcall>
	</target>

	<target name="builderCleanup" description="">
		<echo>Delete stuff</echo>
	</target>	

	<target name="builderInit" description="" depends="sagccInit">
		<echo>
			Initializing builder ...
		</echo>

		<!-- user inputs from ENV -->

		<property name="env.SAG_AQUARIUS" value="aquarius-bg.eur.ad.sag" />
		<property name="env.CC_INSTALLER_URL" value="http://aquarius-bg.eur.ad.sag/cc/installers" />
		<property name="env.CC_INSTALLER" value="cc-def-10.2-milestone-lnxamd64" />
		<property name="env.CC_LICENSES_URL" value="http://irepo.eur.ad.sag/projects/DEVOPS/repos/command-central/raw/licenses/sag10-rnd-lnx-licenses.zip?at=refs%2Fheads%2Frelease%2F101oct2017" />
		<property name="env.REPO_PRODUCT" value="SuiteTest" />
		<property name="env.REPO_FIX" value="intRepo" />

		<!-- defaults -->

		<property name="repo.product" value="${env.REPO_PRODUCT}" />
		<property name="repo.fix" value="${env.REPO_FIX}" />
		<property name="repo.product.host" value="http://${env.SAG_AQUARIUS}" />
		<property name="repo.product.username" value="latest" />
		<property name="repo.product.password" value="latest" />
		<property name="repo.fix.host" value="http://${env.SAG_AQUARIUS}" />
		<property name="repo.fix.username" value="sum" />
		<property name="repo.fix.password" value="sum" />

		<!-- <cc command="add repository products master name=${repo.product} location=${repo.product.url} username=${repo.product.username} password=${repo.product.password}" 
			syncjob="true" waitforcc="300" format="tsv" wait="12" checkevery="2" expectedvalues="DONE" />
		<cc command="list repository products" format="tsv"/>

		<cc command="add repository fixes master name=${repo.fix} location=${repo.fix.url} username=${repo.fix.username} password=${repo.fix.password}" 
			syncjob="true" waitforcc="300" format="tsv" wait="12" checkevery="2" expectedvalues="DONE" />
		<cc command="list repository fixes" format="tsv"/> -->

		<!-- standard params for all templates -->
		<property name="apply.params" value="repo.product=${repo.product} repo.fix=${repo.fix} nodes=local cc.installer=${env.CC_INSTALLER}" />
	</target>

	<target name="builderUp" depends="builderInit">
		
		<!-- <get src="${env.CC_INSTALLER_URL}/${env.CC_INSTALLER}" dest="${env.CC_HOME}/profiles/CCE/data/installers" usetimestamp="true" /> -->
		<cc command="list provisioning bootstrap installers" format="tsv"/>

		<get src="${env.CC_LICENSES_URL}" dest="${env.CC_HOME}/profiles/CCE/data/licenses.zip" usetimestamp="true" />
		<cc command="add license-tools keys" input="${env.CC_HOME}/profiles/CCE/data/licenses.zip" failonerror="false" />
		<cc command="list license-tools keys" format="tsv"/>	
	</target>

	<target name="builderBuild" depends="validate,apply,log,logs">
	</target>

	<target name="validate" description="Validate template without applying" depends="import" >

		<fail unless="alias">
            Neither template '${alias}' nor template source '${t}' are specified!
        </fail>

		<echo>
			Validating template '${alias}' with '${env.properties}' ${apply.params} ...
		</echo>

		<cc command="exec templates composite validate ${alias} ${apply.params} properties=id includeHeaders=false" waitforcc="300" format="tsv" wait="${w}" checkevery="15" input="${env.properties}" outputproperty="jobid" />
		<cc command="list jobmanager jobs ${jobid} properties=status,description,statusAsString,customStatus includeHeaders=false" expectedvalues="DONE|ERROR|WARNING|TIMEDOUT|ConnectException" wait="${w}" checkevery="5" error="${build.dir}/logs/waiting" format="tsv" />
        <cc command="list jobmanager jobs ${jobid} properties=customStatus includeHeaders=false" outputproperty="job.status" format="tsv" />
		
		<antcall target="log" />

		<fail>
			<condition>
				<equals arg1="${job.status}" arg2="VALIDATION FAILED" />
			</condition>
			Validation FAILED. See validation report details in the log above
		</fail>
		
		<echo>Validation SUCCESSFUL</echo>
	</target>

</project>
